server:
  servlet:
    context-path: /kill



#mysql
spring:
  datasource:
    url: jdbc:mysql://192.168.31.249:3306/db_second_kill?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true
    username: root
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
    #数据库连接池druid配置
    #配置参数说明https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8
    #通用配置 https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE
    druid:
      max-active: 20  #最大连接池数量 默认8
      initial-size: 1  #初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 默认0
#     max-wait  获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，
#      并发效率会有所下降，
#      如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
      max-wait: 60000
      use-unfair-lock: true
      min-idle: 1 #最小连接池数量
#      有两个含义：
#      1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
#      2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
      time-between-eviction-runs-millis: 60000  #默认60s 检测连接的间隔时间
      min-evictable-idle-time-millis: 300000 #连接保持空闲而不被驱逐的最小时间
#      建议配置为true，不影响性能，并且保证安全性。
#      申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，
#      执行validationQuery检测连接是否有效。
      test-while-idle: true
      test-on-borrow: false #申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-return: false #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
#      是否缓存preparedStatement，也就是PSCache。
#      PSCache对支持游标的数据库性能提升巨大，
#      比如说oracle。在mysql下建议关闭。
      pool-prepared-statements: false
#      asyncInit是1.1.4中新增加的配置，如果有initialSize数量较多时，打开会加快应用启动时间:
      async-init: true
      #      要启用PSCache，必须配置大于0，当大于0时，
      #      poolPreparedStatements自动触发修改为true。
      #      在Druid中，不会存在Oracle下PSCache占用内存过多的问题，
      #      可以把这个数值配置大一些，比如说100
      #      max-open-prepared-statements: -1
#      用来检测连接是否有效的sql，要求是一个查询语句，
#      常用select 'x'。
#      如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
      validation-query: SELECT 1
        #  filters 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
        ##      监控统计用的filter:stat
      ##      日志用的filter:log4j
      ##      防御sql注入的filter:wall
#      filters: log4j2
#      filter:
#        slf4j:
#          enabled: true
#          statement-create-after-log-enabled: false
#          statement-close-after-log-enabled: false
#          result-set-open-after-log-enabled: false
#          result-set-close-after-log-enabled: false




  #redis
  redis:
    host: 192.168.31.57 #单点redis服务配置
    port: 6379
redisson:
  address: redis://192.168.31.57:6379
  # rabbitmq
  rabbitmq:
    host: 192.168.31.206
    username: test
    password: test
    virtual-host: /
    port: 5672
    #启用消息发送确认模式 配置correlated时 confirmCallback才返回应答
    publisher-confirm-type: correlated
    #启用消息发送返回模式
    publisher-returns: true
    #mandatory不设置消息也会返回
    template:
      mandatory: true
#  jsp配置
  mvc:
    view:
      prefix: /WEB-INF/views/
      suffix: .jsp


#zookeeper客户端curator配置 自定义配置
zookeeper:
  address: 192.168.31.173:2181     #zookeeper Server地址,如果有多个,使用","隔离
                               #例如 ip1:port1,ip2:port2,ip3:port3
  namespace: /lock #路径
  retryCount: 5               #重试次数
  elapsedTimeMs: 5000         #重试间隔时间
  sessionTimeoutMs: 30000     #Session超时时间
  connectionTimeoutMs: 10000  #连接超时时间
mybatis:
  #用来指定mapper中的bean
  type-aliases-package: com.txs.springbootseckill.bean
  #指定映射文件
  mapper-locations: classpath:**/mapping/*.xml



